{"version":3,"sources":["Messages.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Messages","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","i","key","FormControl","Input","placeholder","type","name","value","onChange","e","target","IconButton","variant","onClick","preventDefault","console","log","add","timestamp","FieldValue","serverTimestamp","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"oTA4BeA,G,MAvBEC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACrBC,EADkD,EAApBC,WACRF,EAAQE,SAGpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,gBAAvB,MACpB,0BAAME,UAAU,sBACVF,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MAEL,kBAACE,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,sBAC5C,kBAACI,EAAA,EAAD,CAAaF,UAAU,IACnB,kBAACG,EAAA,EAAD,CACIC,MAAM,QACNC,UAAU,MAETR,EAAQA,gB,iBCJhBS,EAbGC,IAASC,cAAe,CACxCC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAGMC,Y,iCCiFVC,MA/Ef,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAEJC,EAFI,KAEGC,EAFH,OAGqBF,mBAAS,IAH9B,mBAGJG,EAHI,KAGMC,EAHN,OAIqBJ,mBAAS,IAJ9B,mBAIJpB,EAJI,KAIMyB,EAJN,KAiCX,OA3BAC,qBAAU,WACNnB,EAAGoB,WAAW,YACTC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACRN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAAEC,GAAID,EAAIC,GAAIpC,QAASmC,EAAIE,iBAE1E,IAEHT,qBAAU,WACND,EAAYW,OAAO,6BAEpB,IAiBC,yBAAKnC,UAAU,OACX,yBAAKoC,IAAI,4OAA4OC,IAAI,cACzP,yCACA,uCAAatC,GACb,yBAAKC,UAAU,cACX,kBAAC,IAAD,KAEQsB,EAASS,KAAI,WAAkBO,GAAlB,IAAGL,EAAH,EAAGA,GAAIpC,EAAP,EAAOA,QAAP,OACT,kBAAC,EAAD,CACI0C,IAAKN,EACLlC,SAAUA,EACVF,QAASA,QAMzB,0BAAMG,UAAU,aACZ,kBAACwC,EAAA,EAAD,CAAaxC,UAAU,oBACnB,kBAACyC,EAAA,EAAD,CACIzC,UAAU,aACV0C,YAAY,iBACZC,KAAK,OACLC,KAAK,QACLC,MAAOzB,EACP0B,SAAU,SAAAC,GAAC,OAAI1B,EAAS0B,EAAEC,OAAOH,UAGrC,kBAACI,EAAA,EAAD,CACIjD,UAAU,kBACVkD,QAAQ,YACR9C,MAAM,UACNuC,KAAK,SACLQ,QAhDJ,SAACJ,GACjBA,EAAEK,iBAEFC,QAAQC,IAAIvD,EAAUqB,GAEtBd,EAAGoB,WAAW,YAAY6B,IAAI,CAC1B1D,QAASuB,EACTrB,SAAUA,EACVyD,UAAWjD,IAASU,UAAUwC,WAAWC,oBAE7CrC,EAAS,KAuCWsC,UAAWvC,GAEX,kBAAC,IAAD,YC1ERwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMhF,c","file":"static/js/main.397b49ba.chunk.js","sourcesContent":["import React, { forwardRef } from 'react'\r\nimport { Card, CardContent, Typography, Button, CardHeader } from '@material-ui/core'\r\n\r\nimport './Message.css'\r\n\r\nconst Messages = forwardRef(({ message, username }, ref) => {\r\n    const isUser = username === message.username;\r\n\r\n\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message__user'} `}>\r\n            <span className=\"message__username\">\r\n                {!isUser && `${message.username || 'Unknown User'} `}\r\n            </span>\r\n            <Card className={isUser ? 'message__userCard' : 'message__guestCard'}>\r\n                <CardContent className=\"\">\r\n                    <Typography\r\n                        color=\"white\"\r\n                        component=\"h2\"\r\n                    >\r\n                        {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Messages\r\n","\r\nimport firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp( {\r\n    apiKey: \"AIzaSyAbPWJ3BPyvzUqxnvTIo7PihhRVHeVNfZs\",\r\n    authDomain: \"messenger-19949.firebaseapp.com\",\r\n    databaseURL: \"https://messenger-19949.firebaseio.com\",\r\n    projectId: \"messenger-19949\",\r\n    storageBucket: \"messenger-19949.appspot.com\",\r\n    messagingSenderId: \"49247845943\",\r\n    appId: \"1:49247845943:web:90736f85dcb5cf1f8c89b2\",\r\n    measurementId: \"G-HWPJQD6J1V\"\r\n  });\r\n\r\n  const db = firebaseApp.firestore()\r\n\r\n  export default db;","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nimport { Button, FormControl, InputLabel, Input, FormHelperText, Card, CardContent } from '@material-ui/core'\nimport Messages from './Messages';\nimport db from './firebase';\n\nimport firebase from 'firebase'\n\nimport FlipMove from 'react-flip-move';\n\nimport SendIcon from '@material-ui/icons/Send';\n\nimport { IconButton } from '@material-ui/core';\n\n\nfunction App() {\n\n    const [input, setInput] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [username, setUsername] = useState('');\n\n    useEffect(() => {\n        db.collection('messages')\n            .orderBy('timestamp', 'desc')\n            .onSnapshot(snapshot => {\n                setMessages(snapshot.docs.map(doc => ({ id: doc.id, message: doc.data() })))\n            })\n    }, [])\n\n    useEffect(() => {\n        setUsername(prompt('Please enter your name'));\n\n    }, [])\n\n    const sendMessage = (e) => {\n        e.preventDefault();\n\n        console.log(username, input)\n\n        db.collection('messages').add({\n            message: input,\n            username: username,\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        })\n        setInput('')\n\n    }\n\n    return (\n        <div className=\"App\">\n            <img src=\"https://scontent.fktm10-1.fna.fbcdn.net/v/t39.8562-6/37794079_285442762012286_2170626851641229312_n.png?_nc_cat=1&_nc_sid=6825c5&_nc_ohc=5_e2NohomjEAX8Avg5-&_nc_ht=scontent.fktm10-1.fna&oh=72d19af9da93e52f851a042a09834d53&oe=5F52610C\" alt=\"brand-img\" />\n            <h1>Messenger</h1>\n            <h3>Welcome {username}</h3>\n            <div className=\"app__cards\">\n                <FlipMove>\n                    {\n                        messages.map(({ id, message }, i) => (\n                            <Messages\n                                key={id}\n                                username={username}\n                                message={message}\n                            />\n                        ))\n                    }\n                </FlipMove>\n\n                <form className=\"app__form\">\n                    <FormControl className=\"app__formControl\">\n                        <Input\n                            className=\"app__input\"\n                            placeholder=\"Type a message\"\n                            type=\"text\"\n                            name=\"input\"\n                            value={input}\n                            onChange={e => setInput(e.target.value)}\n                        />\n\n                        <IconButton\n                            className=\"app__iconButton\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            onClick={sendMessage}\n                            disabled={!input}\n                        >\n                            <SendIcon />\n                        </IconButton>\n                    </FormControl>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}