{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","preetyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","fontWeight","showDataOnMap","Table","options","legend","display","elements","points","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridlines","ticks","callback","index","values","LineGrapth","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","i","key","todayCases","todayRecovered","todayDeaths","LineGraph","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8b34f17a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, Typography, CardContent } from '@material-ui/core'\r\n\r\nimport './InfoBox.css'\r\n\r\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\r\n    return (\r\n\r\n        <Card\r\n            onClick={props.onClick}\r\n            className={`infoBox ${active && 'infobox--selected'} ${isRed && 'infobox--red'} `}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'} `}>{cases}</h2>\r\n\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n\r\n                    </Typography>\r\n            </CardContent>\r\n        </Card>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\n\r\nimport numeral from 'numeral'\r\n\r\n\r\nimport { Circle, Popup } from 'react-leaflet'\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#cc1034\",\r\n        multiplier: 500,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1000,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 1500,\r\n    }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n\r\n    return sortedData;\r\n}\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n    data.map(country => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    />\r\n                    <div className=\"info-name\" style={{ fontWeight: \"1000\" }}>{country.country}</div>\r\n                    <div className=\"info-confirmed\" style={{ color: 'blue', fontWeight: \"600\" }}>Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\" style={{ color: 'green', fontWeight: \"600\" }}>Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\" style={{ color: 'red', fontWeight: \"600\" }}>Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);\r\n\r\nexport const preetyPrintStat = (stat) => (\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : `No Cases`\r\n)","import React from 'react'\r\n\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet'\r\n\r\nimport './Map.css'\r\nimport { showDataOnMap } from './util'\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom} >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n                \r\n            </LeafletMap>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map(({ country, cases }) => (\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td><strong>{numeral(cases).format(\"0.0a\")}</strong></td>\r\n                    </tr>\r\n                ))\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false\r\n    },\r\n    elements: {\r\n        points: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                },\r\n\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridlines: {\r\n                    display: false\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    }\r\n                },\r\n\r\n            },\r\n        ],\r\n    }\r\n}\r\n\r\nfunction LineGrapth({ casesType = 'cases', ...props }) {\r\n\r\n    const [data, setData] = useState({})\r\n\r\n    const buildChartData = (data, casesType) => {\r\n        const chartData = [];\r\n        let lastDataPoint;\r\n\r\n        for (let date in data.cases) {\r\n            if (lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint);\r\n            };\r\n            lastDataPoint = data[casesType][date];\r\n        };\r\n        return chartData;\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    const chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                })\r\n        };\r\n        fetchData();\r\n\r\n    }, [casesType]);\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [\r\n                            casesType === 'recovered'\r\n                            ?{\r\n                                backgroundColor: \"rgba(16,204,52,0.5)\",\r\n                                borderColor: \"#008000\",\r\n                                data: data\r\n                            }\r\n                            :{\r\n                                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                                borderColor: \"#cc1034\",\r\n                                data: data\r\n                            }\r\n                        ]\r\n                    }}\r\n                />\r\n\r\n            )}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGrapth\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n    FormControl,\n    Select,\n    MenuItem,\n    Card,\n    CardContent,\n} from '@material-ui/core'\n\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport LineGraph from './LineGraph'\n\nimport { sortData, preetyPrintStat } from './util'\n\nimport 'leaflet/dist/leaflet.css'\n\nfunction App() {\n    const [countries, setCountries] = useState([])\n\n    const [country, setCountry] = useState('worldwide')\n\n    const [countryInfo, setCountryInfo] = useState({})\n\n    const [tableData, setTableData] = useState([])\n\n    const [mapCenter, setMapCenter] = useState({\n        lat: 34.80746, lng: -40.4796\n    });\n    const [mapZoom, setMapZoom] = useState(3)\n\n    const [mapCountries, setMapCountries] = useState([])\n\n    const [casesType, setCasesType] = useState(\"cases\")\n\n\n    useEffect(() => {\n        fetch(\"https://disease.sh/v3/covid-19/all\")\n            .then(response => response.json())\n            .then(data => {\n                setCountryInfo(data)\n            })\n    }, [])\n\n    useEffect(() => {\n\n        const getCountriesData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/countries\")\n                .then((response) => response.json())\n                .then((data) => {\n                    //creating your own objects\n                    const countries = data.map((country) => ({\n                        name: country.country,\n                        value: country.countryInfo.iso2\n                    }));\n\n                    const sortedData = sortData(data)\n\n\n                    setTableData(sortedData);\n                    setCountries(countries);\n\n                    setMapCountries(data);\n                });\n        };\n\n        getCountriesData();\n\n    }, [])\n\n    const onCountryChange = async (e) => {\n\n        const countryCode = e.target.value\n\n        const url = countryCode === 'worldwide'\n            ? 'https://disease.sh/v3/covid-19/all'\n            : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n        await fetch(url)\n            .then(response => response.json())\n            .then(data => {\n                setCountry(countryCode)\n                setCountryInfo(data)\n\n                setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                setMapZoom(4);\n\n\n            });\n    };\n\n    console.log(\"Country info ----\", countryInfo)\n\n\n    return (\n\n        <div className=\"app\">   {/* BEM naming convention */}\n            <div className=\"app__left\">\n                <div className=\"app__header\">\n                    <h1>COVID 19 TRACKER</h1>\n\n                    <FormControl className=\"app__dropdown\">\n                        <Select\n                            variant=\"outlined\"\n                            value={country}\n                            onChange={onCountryChange}\n                        >\n                            <MenuItem value=\"worldwide\">WorldWide</MenuItem>\n                            {\n                                countries.map((country, i) => (\n                                    <MenuItem key={i} value={country.value}>{country.name}</MenuItem>\n                                ))\n                            }\n                        </Select>\n                    </FormControl>\n                </div>\n\n                <div className=\"app__stats\">\n                    <InfoBox\n                        isRed\n                        active = {casesType === 'cases'}\n                        onClick={e => setCasesType('cases')}\n                        title=\"Coronavirus Cases\"\n                        total={preetyPrintStat(countryInfo.cases)}\n                        cases={preetyPrintStat(countryInfo.todayCases)}\n                        />\n                    <InfoBox\n                        active = {casesType === 'recovered'}\n                        onClick={e => setCasesType('recovered')}\n                        title=\"Recovered Cases\"\n                        total={preetyPrintStat(countryInfo.recovered)}\n                        cases={preetyPrintStat(countryInfo.todayRecovered)}\n                        />\n                    <InfoBox\n                        isRed\n                        active = {casesType === 'deaths'}\n                        onClick={e => setCasesType('deaths')}\n                        title=\"Deaths Cases\"\n                        total={preetyPrintStat(countryInfo.deaths)}\n                        cases={preetyPrintStat(countryInfo.todayDeaths)}\n                    />\n\n                </div>\n\n                <Map\n                    casesType={casesType}\n                    countries={mapCountries}\n                    center={mapCenter}\n                    zoom={mapZoom}\n                />\n            </div>\n            <Card className=\"app__right\">\n                <CardContent>\n                    <h3>Live Cases By Countries</h3>\n                    <Table countries={tableData}></Table>\n\n                    <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n\n                    <LineGraph\n                        casesType={casesType}\n                        className=\"app__graph\"\n                    />\n                </CardContent>\n\n            </Card>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}